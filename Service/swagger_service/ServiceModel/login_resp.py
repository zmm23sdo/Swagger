# coding: utf-8

"""

    认证服务后台api  # noqa: E501

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LoginResp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access': 'str',
        'refresh': 'str',
        'create': 'str',
        'expiry': 'str',
        'refresh_create': 'str',
        'refresh_expiry': 'str'
    }

    attribute_map = {
        'access': 'access',
        'refresh': 'refresh',
        'create': 'create',
        'expiry': 'expiry',
        'refresh_create': 'refresh_create',
        'refresh_expiry': 'refresh_expiry'
    }

    def __init__(self, access=None, refresh=None, create=None, expiry=None, refresh_create=None, refresh_expiry=None):  # noqa: E501
        """LoginResp - a model defined in Swagger"""  # noqa: E501
        self._access = None
        self._refresh = None
        self._create = None
        self._expiry = None
        self._refresh_create = None
        self._refresh_expiry = None
        self.discriminator = None
        self.access = access
        self.refresh = refresh
        self.create = create
        self.expiry = expiry
        self.refresh_create = refresh_create
        self.refresh_expiry = refresh_expiry

    @property
    def access(self):
        """Gets the access of this LoginResp.  # noqa: E501

         access token  # noqa: E501

        :return: The access of this LoginResp.  # noqa: E501
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this LoginResp.

         access token  # noqa: E501

        :param access: The access of this LoginResp.  # noqa: E501
        :type: str
        """
        if access is None:
            raise ValueError("Invalid value for `access`, must not be `None`")  # noqa: E501

        self._access = access

    @property
    def refresh(self):
        """Gets the refresh of this LoginResp.  # noqa: E501

         refresh token  # noqa: E501

        :return: The refresh of this LoginResp.  # noqa: E501
        :rtype: str
        """
        return self._refresh

    @refresh.setter
    def refresh(self, refresh):
        """Sets the refresh of this LoginResp.

         refresh token  # noqa: E501

        :param refresh: The refresh of this LoginResp.  # noqa: E501
        :type: str
        """
        if refresh is None:
            raise ValueError("Invalid value for `refresh`, must not be `None`")  # noqa: E501

        self._refresh = refresh

    @property
    def create(self):
        """Gets the create of this LoginResp.  # noqa: E501

         创建时间  # noqa: E501

        :return: The create of this LoginResp.  # noqa: E501
        :rtype: str
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this LoginResp.

         创建时间  # noqa: E501

        :param create: The create of this LoginResp.  # noqa: E501
        :type: str
        """
        if create is None:
            raise ValueError("Invalid value for `create`, must not be `None`")  # noqa: E501

        self._create = create

    @property
    def expiry(self):
        """Gets the expiry of this LoginResp.  # noqa: E501

         access token过期时间  # noqa: E501

        :return: The expiry of this LoginResp.  # noqa: E501
        :rtype: str
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this LoginResp.

         access token过期时间  # noqa: E501

        :param expiry: The expiry of this LoginResp.  # noqa: E501
        :type: str
        """
        if expiry is None:
            raise ValueError("Invalid value for `expiry`, must not be `None`")  # noqa: E501

        self._expiry = expiry

    @property
    def refresh_create(self):
        """Gets the refresh_create of this LoginResp.  # noqa: E501

         refresh token创建时间  # noqa: E501

        :return: The refresh_create of this LoginResp.  # noqa: E501
        :rtype: str
        """
        return self._refresh_create

    @refresh_create.setter
    def refresh_create(self, refresh_create):
        """Sets the refresh_create of this LoginResp.

         refresh token创建时间  # noqa: E501

        :param refresh_create: The refresh_create of this LoginResp.  # noqa: E501
        :type: str
        """
        if refresh_create is None:
            raise ValueError("Invalid value for `refresh_create`, must not be `None`")  # noqa: E501

        self._refresh_create = refresh_create

    @property
    def refresh_expiry(self):
        """Gets the refresh_expiry of this LoginResp.  # noqa: E501

         refresh token过期时间  # noqa: E501

        :return: The refresh_expiry of this LoginResp.  # noqa: E501
        :rtype: str
        """
        return self._refresh_expiry

    @refresh_expiry.setter
    def refresh_expiry(self, refresh_expiry):
        """Sets the refresh_expiry of this LoginResp.

         refresh token过期时间  # noqa: E501

        :param refresh_expiry: The refresh_expiry of this LoginResp.  # noqa: E501
        :type: str
        """
        if refresh_expiry is None:
            raise ValueError("Invalid value for `refresh_expiry`, must not be `None`")  # noqa: E501

        self._refresh_expiry = refresh_expiry

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoginResp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoginResp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
