# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Group(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'version': 'str',
        'parent_id': 'str',
        'created_time': 'str',
        'items': 'str',
        'child': 'list[Group]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'version': 'version',
        'parent_id': 'parent_id',
        'created_time': 'created_time',
        'items': 'items',
        'child': 'child'
    }

    def __init__(self, id=None, name=None, version=None, parent_id=None, created_time=None, items=None, child=None):  # noqa: E501
        """Group - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._version = None
        self._parent_id = None
        self._created_time = None
        self._items = None
        self._child = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.version = version
        self.parent_id = parent_id
        self.created_time = created_time
        self.items = items
        self.child = child

    @property
    def id(self):
        """Gets the id of this Group.  # noqa: E501

         分组ID  # noqa: E501

        :return: The id of this Group.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Group.

         分组ID  # noqa: E501

        :param id: The id of this Group.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Group.  # noqa: E501

         分组名称  # noqa: E501

        :return: The name of this Group.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Group.

         分组名称  # noqa: E501

        :param name: The name of this Group.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def version(self):
        """Gets the version of this Group.  # noqa: E501

         version  # noqa: E501

        :return: The version of this Group.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Group.

         version  # noqa: E501

        :param version: The version of this Group.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def parent_id(self):
        """Gets the parent_id of this Group.  # noqa: E501

         父分组ID  # noqa: E501

        :return: The parent_id of this Group.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Group.

         父分组ID  # noqa: E501

        :param parent_id: The parent_id of this Group.  # noqa: E501
        :type: str
        """
        if parent_id is None:
            raise ValueError("Invalid value for `parent_id`, must not be `None`")  # noqa: E501

        self._parent_id = parent_id

    @property
    def created_time(self):
        """Gets the created_time of this Group.  # noqa: E501

         创建时间  # noqa: E501

        :return: The created_time of this Group.  # noqa: E501
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Group.

         创建时间  # noqa: E501

        :param created_time: The created_time of this Group.  # noqa: E501
        :type: str
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")  # noqa: E501

        self._created_time = created_time

    @property
    def items(self):
        """Gets the items of this Group.  # noqa: E501

         商品数量  # noqa: E501

        :return: The items of this Group.  # noqa: E501
        :rtype: str
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Group.

         商品数量  # noqa: E501

        :param items: The items of this Group.  # noqa: E501
        :type: str
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")  # noqa: E501

        self._items = items

    @property
    def child(self):
        """Gets the child of this Group.  # noqa: E501

         子分组  # noqa: E501

        :return: The child of this Group.  # noqa: E501
        :rtype: list[Group]
        """
        return self._child

    @child.setter
    def child(self, child):
        """Sets the child of this Group.

         子分组  # noqa: E501

        :param child: The child of this Group.  # noqa: E501
        :type: list[Group]
        """
        if child is None:
            raise ValueError("Invalid value for `child`, must not be `None`")  # noqa: E501

        self._child = child

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Group, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Group):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
