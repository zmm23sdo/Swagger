# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Product(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'category_id': 'str',
        'describe': 'str',
        'pic': 'list[str]',
        'group_id': 'list[str]',
        'brand': 'str',
        'warranty_duration': 'str',
        'warranty_type': 'str',
        'sku_items': 'list[SkuItem]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'category_id': 'category_id',
        'describe': 'describe',
        'pic': 'pic',
        'group_id': 'group_id',
        'brand': 'brand',
        'warranty_duration': 'warranty_duration',
        'warranty_type': 'warranty_type',
        'sku_items': 'sku_items'
    }

    def __init__(self, id=None, name=None, category_id=None, describe=None, pic=None, group_id=None, brand=None, warranty_duration=None, warranty_type=None, sku_items=None):  # noqa: E501
        """Product - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._category_id = None
        self._describe = None
        self._pic = None
        self._group_id = None
        self._brand = None
        self._warranty_duration = None
        self._warranty_type = None
        self._sku_items = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.category_id = category_id
        self.describe = describe
        self.pic = pic
        self.group_id = group_id
        self.brand = brand
        self.warranty_duration = warranty_duration
        self.warranty_type = warranty_type
        self.sku_items = sku_items

    @property
    def id(self):
        """Gets the id of this Product.  # noqa: E501

         商品ID  # noqa: E501

        :return: The id of this Product.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Product.

         商品ID  # noqa: E501

        :param id: The id of this Product.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Product.  # noqa: E501

         商品名称, 规则: 请输入20-120个字符  # noqa: E501

        :return: The name of this Product.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Product.

         商品名称, 规则: 请输入20-120个字符  # noqa: E501

        :param name: The name of this Product.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def category_id(self):
        """Gets the category_id of this Product.  # noqa: E501

         商品类目id  # noqa: E501

        :return: The category_id of this Product.  # noqa: E501
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this Product.

         商品类目id  # noqa: E501

        :param category_id: The category_id of this Product.  # noqa: E501
        :type: str
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")  # noqa: E501

        self._category_id = category_id

    @property
    def describe(self):
        """Gets the describe of this Product.  # noqa: E501

         商品描述,暂时仅用于商品管理的作用，非必填项目,0-3000个字符  # noqa: E501

        :return: The describe of this Product.  # noqa: E501
        :rtype: str
        """
        return self._describe

    @describe.setter
    def describe(self, describe):
        """Sets the describe of this Product.

         商品描述,暂时仅用于商品管理的作用，非必填项目,0-3000个字符  # noqa: E501

        :param describe: The describe of this Product.  # noqa: E501
        :type: str
        """
        if describe is None:
            raise ValueError("Invalid value for `describe`, must not be `None`")  # noqa: E501

        self._describe = describe

    @property
    def pic(self):
        """Gets the pic of this Product.  # noqa: E501

         商品图  # noqa: E501

        :return: The pic of this Product.  # noqa: E501
        :rtype: list[str]
        """
        return self._pic

    @pic.setter
    def pic(self, pic):
        """Sets the pic of this Product.

         商品图  # noqa: E501

        :param pic: The pic of this Product.  # noqa: E501
        :type: list[str]
        """
        if pic is None:
            raise ValueError("Invalid value for `pic`, must not be `None`")  # noqa: E501

        self._pic = pic

    @property
    def group_id(self):
        """Gets the group_id of this Product.  # noqa: E501

         商品分组id  # noqa: E501

        :return: The group_id of this Product.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this Product.

         商品分组id  # noqa: E501

        :param group_id: The group_id of this Product.  # noqa: E501
        :type: list[str]
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")  # noqa: E501

        self._group_id = group_id

    @property
    def brand(self):
        """Gets the brand of this Product.  # noqa: E501

         品牌  # noqa: E501

        :return: The brand of this Product.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this Product.

         品牌  # noqa: E501

        :param brand: The brand of this Product.  # noqa: E501
        :type: str
        """
        if brand is None:
            raise ValueError("Invalid value for `brand`, must not be `None`")  # noqa: E501

        self._brand = brand

    @property
    def warranty_duration(self):
        """Gets the warranty_duration of this Product.  # noqa: E501

         保修时间  # noqa: E501

        :return: The warranty_duration of this Product.  # noqa: E501
        :rtype: str
        """
        return self._warranty_duration

    @warranty_duration.setter
    def warranty_duration(self, warranty_duration):
        """Sets the warranty_duration of this Product.

         保修时间  # noqa: E501

        :param warranty_duration: The warranty_duration of this Product.  # noqa: E501
        :type: str
        """
        if warranty_duration is None:
            raise ValueError("Invalid value for `warranty_duration`, must not be `None`")  # noqa: E501

        self._warranty_duration = warranty_duration

    @property
    def warranty_type(self):
        """Gets the warranty_type of this Product.  # noqa: E501

         保修类型  # noqa: E501

        :return: The warranty_type of this Product.  # noqa: E501
        :rtype: str
        """
        return self._warranty_type

    @warranty_type.setter
    def warranty_type(self, warranty_type):
        """Sets the warranty_type of this Product.

         保修类型  # noqa: E501

        :param warranty_type: The warranty_type of this Product.  # noqa: E501
        :type: str
        """
        if warranty_type is None:
            raise ValueError("Invalid value for `warranty_type`, must not be `None`")  # noqa: E501

        self._warranty_type = warranty_type

    @property
    def sku_items(self):
        """Gets the sku_items of this Product.  # noqa: E501

         变体集合  # noqa: E501

        :return: The sku_items of this Product.  # noqa: E501
        :rtype: list[SkuItem]
        """
        return self._sku_items

    @sku_items.setter
    def sku_items(self, sku_items):
        """Sets the sku_items of this Product.

         变体集合  # noqa: E501

        :param sku_items: The sku_items of this Product.  # noqa: E501
        :type: list[SkuItem]
        """
        if sku_items is None:
            raise ValueError("Invalid value for `sku_items`, must not be `None`")  # noqa: E501

        self._sku_items = sku_items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Product, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Product):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
