# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SkuItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'price': 'str',
        'stock': 'str',
        'weight': 'str',
        'barcode': 'str',
        'admin_sku': 'str',
        'pic': 'list[str]',
        'variations': 'list[Variation]'
    }

    attribute_map = {
        'price': 'price',
        'stock': 'stock',
        'weight': 'weight',
        'barcode': 'barcode',
        'admin_sku': 'admin_sku',
        'pic': 'pic',
        'variations': 'variations'
    }

    def __init__(self, price=None, stock=None, weight=None, barcode=None, admin_sku=None, pic=None, variations=None):  # noqa: E501
        """SkuItem - a model defined in Swagger"""  # noqa: E501
        self._price = None
        self._stock = None
        self._weight = None
        self._barcode = None
        self._admin_sku = None
        self._pic = None
        self._variations = None
        self.discriminator = None
        self.price = price
        self.stock = stock
        self.weight = weight
        self.barcode = barcode
        self.admin_sku = admin_sku
        self.pic = pic
        self.variations = variations

    @property
    def price(self):
        """Gets the price of this SkuItem.  # noqa: E501

         价格  # noqa: E501

        :return: The price of this SkuItem.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this SkuItem.

         价格  # noqa: E501

        :param price: The price of this SkuItem.  # noqa: E501
        :type: str
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def stock(self):
        """Gets the stock of this SkuItem.  # noqa: E501

         库存  # noqa: E501

        :return: The stock of this SkuItem.  # noqa: E501
        :rtype: str
        """
        return self._stock

    @stock.setter
    def stock(self, stock):
        """Sets the stock of this SkuItem.

         库存  # noqa: E501

        :param stock: The stock of this SkuItem.  # noqa: E501
        :type: str
        """
        if stock is None:
            raise ValueError("Invalid value for `stock`, must not be `None`")  # noqa: E501

        self._stock = stock

    @property
    def weight(self):
        """Gets the weight of this SkuItem.  # noqa: E501

         重量  # noqa: E501

        :return: The weight of this SkuItem.  # noqa: E501
        :rtype: str
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this SkuItem.

         重量  # noqa: E501

        :param weight: The weight of this SkuItem.  # noqa: E501
        :type: str
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")  # noqa: E501

        self._weight = weight

    @property
    def barcode(self):
        """Gets the barcode of this SkuItem.  # noqa: E501

         条形码  # noqa: E501

        :return: The barcode of this SkuItem.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this SkuItem.

         条形码  # noqa: E501

        :param barcode: The barcode of this SkuItem.  # noqa: E501
        :type: str
        """
        if barcode is None:
            raise ValueError("Invalid value for `barcode`, must not be `None`")  # noqa: E501

        self._barcode = barcode

    @property
    def admin_sku(self):
        """Gets the admin_sku of this SkuItem.  # noqa: E501

         admin输入的sku  # noqa: E501

        :return: The admin_sku of this SkuItem.  # noqa: E501
        :rtype: str
        """
        return self._admin_sku

    @admin_sku.setter
    def admin_sku(self, admin_sku):
        """Sets the admin_sku of this SkuItem.

         admin输入的sku  # noqa: E501

        :param admin_sku: The admin_sku of this SkuItem.  # noqa: E501
        :type: str
        """
        if admin_sku is None:
            raise ValueError("Invalid value for `admin_sku`, must not be `None`")  # noqa: E501

        self._admin_sku = admin_sku

    @property
    def pic(self):
        """Gets the pic of this SkuItem.  # noqa: E501

         当前变体的图片  # noqa: E501

        :return: The pic of this SkuItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._pic

    @pic.setter
    def pic(self, pic):
        """Sets the pic of this SkuItem.

         当前变体的图片  # noqa: E501

        :param pic: The pic of this SkuItem.  # noqa: E501
        :type: list[str]
        """
        if pic is None:
            raise ValueError("Invalid value for `pic`, must not be `None`")  # noqa: E501

        self._pic = pic

    @property
    def variations(self):
        """Gets the variations of this SkuItem.  # noqa: E501

         变体规格键值对 例如 [{\"key\":\"color\",\"val\":\"red\"},{\"key\":\"size\",\"val\":\"small\"}]  # noqa: E501

        :return: The variations of this SkuItem.  # noqa: E501
        :rtype: list[Variation]
        """
        return self._variations

    @variations.setter
    def variations(self, variations):
        """Sets the variations of this SkuItem.

         变体规格键值对 例如 [{\"key\":\"color\",\"val\":\"red\"},{\"key\":\"size\",\"val\":\"small\"}]  # noqa: E501

        :param variations: The variations of this SkuItem.  # noqa: E501
        :type: list[Variation]
        """
        if variations is None:
            raise ValueError("Invalid value for `variations`, must not be `None`")  # noqa: E501

        self._variations = variations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SkuItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SkuItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
