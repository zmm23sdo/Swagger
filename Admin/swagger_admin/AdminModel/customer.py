# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Customer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'username': 'str',
        'name': 'str',
        'avatar': 'str',
        'country_code': 'str',
        'phone_number': 'str',
        'email': 'str',
        'num': 'str',
        'source': 'str',
        'desc': 'str',
        'last_at': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'deleted_at': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'username': 'username',
        'name': 'name',
        'avatar': 'avatar',
        'country_code': 'country_code',
        'phone_number': 'phone_number',
        'email': 'email',
        'num': 'num',
        'source': 'source',
        'desc': 'desc',
        'last_at': 'last_at',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'deleted_at': 'deleted_at'
    }

    def __init__(self, uuid=None, username=None, name=None, avatar=None, country_code=None, phone_number=None, email=None, num=None, source=None, desc=None, last_at=None, created_at=None, updated_at=None, deleted_at=None):  # noqa: E501
        """Customer - a model defined in Swagger"""  # noqa: E501
        self._uuid = None
        self._username = None
        self._name = None
        self._avatar = None
        self._country_code = None
        self._phone_number = None
        self._email = None
        self._num = None
        self._source = None
        self._desc = None
        self._last_at = None
        self._created_at = None
        self._updated_at = None
        self._deleted_at = None
        self.discriminator = None
        self.uuid = uuid
        self.username = username
        self.name = name
        self.avatar = avatar
        self.country_code = country_code
        self.phone_number = phone_number
        self.email = email
        self.num = num
        self.source = source
        self.desc = desc
        self.last_at = last_at
        self.created_at = created_at
        self.updated_at = updated_at
        self.deleted_at = deleted_at

    @property
    def uuid(self):
        """Gets the uuid of this Customer.  # noqa: E501

         客户ID  # noqa: E501

        :return: The uuid of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Customer.

         客户ID  # noqa: E501

        :param uuid: The uuid of this Customer.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def username(self):
        """Gets the username of this Customer.  # noqa: E501

         姓名  # noqa: E501

        :return: The username of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Customer.

         姓名  # noqa: E501

        :param username: The username of this Customer.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def name(self):
        """Gets the name of this Customer.  # noqa: E501

         昵称  # noqa: E501

        :return: The name of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Customer.

         昵称  # noqa: E501

        :param name: The name of this Customer.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def avatar(self):
        """Gets the avatar of this Customer.  # noqa: E501

         头像  # noqa: E501

        :return: The avatar of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this Customer.

         头像  # noqa: E501

        :param avatar: The avatar of this Customer.  # noqa: E501
        :type: str
        """
        if avatar is None:
            raise ValueError("Invalid value for `avatar`, must not be `None`")  # noqa: E501

        self._avatar = avatar

    @property
    def country_code(self):
        """Gets the country_code of this Customer.  # noqa: E501

         国家码  # noqa: E501

        :return: The country_code of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Customer.

         国家码  # noqa: E501

        :param country_code: The country_code of this Customer.  # noqa: E501
        :type: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")  # noqa: E501

        self._country_code = country_code

    @property
    def phone_number(self):
        """Gets the phone_number of this Customer.  # noqa: E501

         手机号  # noqa: E501

        :return: The phone_number of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Customer.

         手机号  # noqa: E501

        :param phone_number: The phone_number of this Customer.  # noqa: E501
        :type: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def email(self):
        """Gets the email of this Customer.  # noqa: E501

         邮箱  # noqa: E501

        :return: The email of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Customer.

         邮箱  # noqa: E501

        :param email: The email of this Customer.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def num(self):
        """Gets the num of this Customer.  # noqa: E501

         购次  # noqa: E501

        :return: The num of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._num

    @num.setter
    def num(self, num):
        """Sets the num of this Customer.

         购次  # noqa: E501

        :param num: The num of this Customer.  # noqa: E501
        :type: str
        """
        if num is None:
            raise ValueError("Invalid value for `num`, must not be `None`")  # noqa: E501

        self._num = num

    @property
    def source(self):
        """Gets the source of this Customer.  # noqa: E501

         来源渠道  # noqa: E501

        :return: The source of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Customer.

         来源渠道  # noqa: E501

        :param source: The source of this Customer.  # noqa: E501
        :type: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def desc(self):
        """Gets the desc of this Customer.  # noqa: E501

         备注  # noqa: E501

        :return: The desc of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this Customer.

         备注  # noqa: E501

        :param desc: The desc of this Customer.  # noqa: E501
        :type: str
        """
        if desc is None:
            raise ValueError("Invalid value for `desc`, must not be `None`")  # noqa: E501

        self._desc = desc

    @property
    def last_at(self):
        """Gets the last_at of this Customer.  # noqa: E501

         最近购买时间  # noqa: E501

        :return: The last_at of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._last_at

    @last_at.setter
    def last_at(self, last_at):
        """Sets the last_at of this Customer.

         最近购买时间  # noqa: E501

        :param last_at: The last_at of this Customer.  # noqa: E501
        :type: str
        """
        if last_at is None:
            raise ValueError("Invalid value for `last_at`, must not be `None`")  # noqa: E501

        self._last_at = last_at

    @property
    def created_at(self):
        """Gets the created_at of this Customer.  # noqa: E501

         创建时间  # noqa: E501

        :return: The created_at of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Customer.

         创建时间  # noqa: E501

        :param created_at: The created_at of this Customer.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Customer.  # noqa: E501

         更新时间  # noqa: E501

        :return: The updated_at of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Customer.

         更新时间  # noqa: E501

        :param updated_at: The updated_at of this Customer.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this Customer.  # noqa: E501

         删除时间 空值: 正常, 有值: 注销  # noqa: E501

        :return: The deleted_at of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this Customer.

         删除时间 空值: 正常, 有值: 注销  # noqa: E501

        :param deleted_at: The deleted_at of this Customer.  # noqa: E501
        :type: str
        """
        if deleted_at is None:
            raise ValueError("Invalid value for `deleted_at`, must not be `None`")  # noqa: E501

        self._deleted_at = deleted_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Customer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Customer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
