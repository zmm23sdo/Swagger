# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Role(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'created_at': 'str',
        'created_by': 'str',
        'num': 'str',
        'tenant_type': 'str',
        'detail': 'list[RoleDetail]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'created_at': 'created_at',
        'created_by': 'created_by',
        'num': 'num',
        'tenant_type': 'tenant_type',
        'detail': 'detail'
    }

    def __init__(self, id=None, name=None, description=None, created_at=None, created_by=None, num=None, tenant_type=None, detail=None):  # noqa: E501
        """Role - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._created_at = None
        self._created_by = None
        self._num = None
        self._tenant_type = None
        self._detail = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.description = description
        self.created_at = created_at
        self.created_by = created_by
        self.num = num
        self.tenant_type = tenant_type
        self.detail = detail

    @property
    def id(self):
        """Gets the id of this Role.  # noqa: E501

         角色ID  # noqa: E501

        :return: The id of this Role.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Role.

         角色ID  # noqa: E501

        :param id: The id of this Role.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Role.  # noqa: E501

         角色名称  # noqa: E501

        :return: The name of this Role.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Role.

         角色名称  # noqa: E501

        :param name: The name of this Role.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Role.  # noqa: E501

         角色描述  # noqa: E501

        :return: The description of this Role.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Role.

         角色描述  # noqa: E501

        :param description: The description of this Role.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def created_at(self):
        """Gets the created_at of this Role.  # noqa: E501

         创建时间  # noqa: E501

        :return: The created_at of this Role.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Role.

         创建时间  # noqa: E501

        :param created_at: The created_at of this Role.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Role.  # noqa: E501

         创建人  # noqa: E501

        :return: The created_by of this Role.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Role.

         创建人  # noqa: E501

        :param created_by: The created_by of this Role.  # noqa: E501
        :type: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def num(self):
        """Gets the num of this Role.  # noqa: E501

         关联人数  # noqa: E501

        :return: The num of this Role.  # noqa: E501
        :rtype: str
        """
        return self._num

    @num.setter
    def num(self, num):
        """Sets the num of this Role.

         关联人数  # noqa: E501

        :param num: The num of this Role.  # noqa: E501
        :type: str
        """
        if num is None:
            raise ValueError("Invalid value for `num`, must not be `None`")  # noqa: E501

        self._num = num

    @property
    def tenant_type(self):
        """Gets the tenant_type of this Role.  # noqa: E501

         所属平台  # noqa: E501

        :return: The tenant_type of this Role.  # noqa: E501
        :rtype: str
        """
        return self._tenant_type

    @tenant_type.setter
    def tenant_type(self, tenant_type):
        """Sets the tenant_type of this Role.

         所属平台  # noqa: E501

        :param tenant_type: The tenant_type of this Role.  # noqa: E501
        :type: str
        """
        if tenant_type is None:
            raise ValueError("Invalid value for `tenant_type`, must not be `None`")  # noqa: E501

        self._tenant_type = tenant_type

    @property
    def detail(self):
        """Gets the detail of this Role.  # noqa: E501

         角色包含的分类结构详情  # noqa: E501

        :return: The detail of this Role.  # noqa: E501
        :rtype: list[RoleDetail]
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this Role.

         角色包含的分类结构详情  # noqa: E501

        :param detail: The detail of this Role.  # noqa: E501
        :type: list[RoleDetail]
        """
        if detail is None:
            raise ValueError("Invalid value for `detail`, must not be `None`")  # noqa: E501

        self._detail = detail

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Role, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Role):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
