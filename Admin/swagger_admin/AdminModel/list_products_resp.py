# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ListProductsResp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total': 'int',
        'total_all': 'int',
        'total_on': 'int',
        'total_out': 'int',
        'total_off': 'int',
        'list': 'list[ListProductInfo]'
    }

    attribute_map = {
        'total': 'total',
        'total_all': 'total_all',
        'total_on': 'total_on',
        'total_out': 'total_out',
        'total_off': 'total_off',
        'list': 'list'
    }

    def __init__(self, total=None, total_all=None, total_on=None, total_out=None, total_off=None, list=None):  # noqa: E501
        """ListProductsResp - a model defined in Swagger"""  # noqa: E501
        self._total = None
        self._total_all = None
        self._total_on = None
        self._total_out = None
        self._total_off = None
        self._list = None
        self.discriminator = None
        self.total = total
        self.total_all = total_all
        self.total_on = total_on
        self.total_out = total_out
        self.total_off = total_off
        self.list = list

    @property
    def total(self):
        """Gets the total of this ListProductsResp.  # noqa: E501

         总数  # noqa: E501

        :return: The total of this ListProductsResp.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ListProductsResp.

         总数  # noqa: E501

        :param total: The total of this ListProductsResp.  # noqa: E501
        :type: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    @property
    def total_all(self):
        """Gets the total_all of this ListProductsResp.  # noqa: E501

         所有总数  # noqa: E501

        :return: The total_all of this ListProductsResp.  # noqa: E501
        :rtype: int
        """
        return self._total_all

    @total_all.setter
    def total_all(self, total_all):
        """Sets the total_all of this ListProductsResp.

         所有总数  # noqa: E501

        :param total_all: The total_all of this ListProductsResp.  # noqa: E501
        :type: int
        """
        if total_all is None:
            raise ValueError("Invalid value for `total_all`, must not be `None`")  # noqa: E501

        self._total_all = total_all

    @property
    def total_on(self):
        """Gets the total_on of this ListProductsResp.  # noqa: E501

         上架中总数  # noqa: E501

        :return: The total_on of this ListProductsResp.  # noqa: E501
        :rtype: int
        """
        return self._total_on

    @total_on.setter
    def total_on(self, total_on):
        """Sets the total_on of this ListProductsResp.

         上架中总数  # noqa: E501

        :param total_on: The total_on of this ListProductsResp.  # noqa: E501
        :type: int
        """
        if total_on is None:
            raise ValueError("Invalid value for `total_on`, must not be `None`")  # noqa: E501

        self._total_on = total_on

    @property
    def total_out(self):
        """Gets the total_out of this ListProductsResp.  # noqa: E501

         售罄总数  # noqa: E501

        :return: The total_out of this ListProductsResp.  # noqa: E501
        :rtype: int
        """
        return self._total_out

    @total_out.setter
    def total_out(self, total_out):
        """Sets the total_out of this ListProductsResp.

         售罄总数  # noqa: E501

        :param total_out: The total_out of this ListProductsResp.  # noqa: E501
        :type: int
        """
        if total_out is None:
            raise ValueError("Invalid value for `total_out`, must not be `None`")  # noqa: E501

        self._total_out = total_out

    @property
    def total_off(self):
        """Gets the total_off of this ListProductsResp.  # noqa: E501

         下架总数  # noqa: E501

        :return: The total_off of this ListProductsResp.  # noqa: E501
        :rtype: int
        """
        return self._total_off

    @total_off.setter
    def total_off(self, total_off):
        """Sets the total_off of this ListProductsResp.

         下架总数  # noqa: E501

        :param total_off: The total_off of this ListProductsResp.  # noqa: E501
        :type: int
        """
        if total_off is None:
            raise ValueError("Invalid value for `total_off`, must not be `None`")  # noqa: E501

        self._total_off = total_off

    @property
    def list(self):
        """Gets the list of this ListProductsResp.  # noqa: E501


        :return: The list of this ListProductsResp.  # noqa: E501
        :rtype: list[ListProductInfo]
        """
        return self._list

    @list.setter
    def list(self, list):
        """Sets the list of this ListProductsResp.


        :param list: The list of this ListProductsResp.  # noqa: E501
        :type: list[ListProductInfo]
        """
        if list is None:
            raise ValueError("Invalid value for `list`, must not be `None`")  # noqa: E501

        self._list = list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListProductsResp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListProductsResp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
