# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ListProductInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'visitor_num': 'int',
        'view_num': 'int',
        'state': 'str',
        'sku': 'str',
        'variation': 'str',
        'price': 'str',
        'stock': 'int',
        'sold': 'int',
        'sku_ver': 'int',
        'child': 'list[ListProductChild]'
    }

    attribute_map = {
        'name': 'name',
        'visitor_num': 'visitor_num',
        'view_num': 'view_num',
        'state': 'state',
        'sku': 'sku',
        'variation': 'variation',
        'price': 'price',
        'stock': 'stock',
        'sold': 'sold',
        'sku_ver': 'skuVer',
        'child': 'child'
    }

    def __init__(self, name=None, visitor_num=None, view_num=None, state=None, sku=None, variation=None, price=None, stock=None, sold=None, sku_ver=None, child=None):  # noqa: E501
        """ListProductInfo - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._visitor_num = None
        self._view_num = None
        self._state = None
        self._sku = None
        self._variation = None
        self._price = None
        self._stock = None
        self._sold = None
        self._sku_ver = None
        self._child = None
        self.discriminator = None
        self.name = name
        self.visitor_num = visitor_num
        self.view_num = view_num
        self.state = state
        self.sku = sku
        self.variation = variation
        self.price = price
        self.stock = stock
        self.sold = sold
        self.sku_ver = sku_ver
        self.child = child

    @property
    def name(self):
        """Gets the name of this ListProductInfo.  # noqa: E501

         商品名称  # noqa: E501

        :return: The name of this ListProductInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ListProductInfo.

         商品名称  # noqa: E501

        :param name: The name of this ListProductInfo.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def visitor_num(self):
        """Gets the visitor_num of this ListProductInfo.  # noqa: E501

         访客数量  # noqa: E501

        :return: The visitor_num of this ListProductInfo.  # noqa: E501
        :rtype: int
        """
        return self._visitor_num

    @visitor_num.setter
    def visitor_num(self, visitor_num):
        """Sets the visitor_num of this ListProductInfo.

         访客数量  # noqa: E501

        :param visitor_num: The visitor_num of this ListProductInfo.  # noqa: E501
        :type: int
        """
        if visitor_num is None:
            raise ValueError("Invalid value for `visitor_num`, must not be `None`")  # noqa: E501

        self._visitor_num = visitor_num

    @property
    def view_num(self):
        """Gets the view_num of this ListProductInfo.  # noqa: E501

         浏览量  # noqa: E501

        :return: The view_num of this ListProductInfo.  # noqa: E501
        :rtype: int
        """
        return self._view_num

    @view_num.setter
    def view_num(self, view_num):
        """Sets the view_num of this ListProductInfo.

         浏览量  # noqa: E501

        :param view_num: The view_num of this ListProductInfo.  # noqa: E501
        :type: int
        """
        if view_num is None:
            raise ValueError("Invalid value for `view_num`, must not be `None`")  # noqa: E501

        self._view_num = view_num

    @property
    def state(self):
        """Gets the state of this ListProductInfo.  # noqa: E501

         状态  all:全部, on:上架 , active:下架 , out:售罄 ,  inactive: 删除  # noqa: E501

        :return: The state of this ListProductInfo.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ListProductInfo.

         状态  all:全部, on:上架 , active:下架 , out:售罄 ,  inactive: 删除  # noqa: E501

        :param state: The state of this ListProductInfo.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def sku(self):
        """Gets the sku of this ListProductInfo.  # noqa: E501

         商品sku  # noqa: E501

        :return: The sku of this ListProductInfo.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ListProductInfo.

         商品sku  # noqa: E501

        :param sku: The sku of this ListProductInfo.  # noqa: E501
        :type: str
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")  # noqa: E501

        self._sku = sku

    @property
    def variation(self):
        """Gets the variation of this ListProductInfo.  # noqa: E501

         商品规格信息  # noqa: E501

        :return: The variation of this ListProductInfo.  # noqa: E501
        :rtype: str
        """
        return self._variation

    @variation.setter
    def variation(self, variation):
        """Sets the variation of this ListProductInfo.

         商品规格信息  # noqa: E501

        :param variation: The variation of this ListProductInfo.  # noqa: E501
        :type: str
        """
        if variation is None:
            raise ValueError("Invalid value for `variation`, must not be `None`")  # noqa: E501

        self._variation = variation

    @property
    def price(self):
        """Gets the price of this ListProductInfo.  # noqa: E501

         价格  # noqa: E501

        :return: The price of this ListProductInfo.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ListProductInfo.

         价格  # noqa: E501

        :param price: The price of this ListProductInfo.  # noqa: E501
        :type: str
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def stock(self):
        """Gets the stock of this ListProductInfo.  # noqa: E501

         库存  # noqa: E501

        :return: The stock of this ListProductInfo.  # noqa: E501
        :rtype: int
        """
        return self._stock

    @stock.setter
    def stock(self, stock):
        """Sets the stock of this ListProductInfo.

         库存  # noqa: E501

        :param stock: The stock of this ListProductInfo.  # noqa: E501
        :type: int
        """
        if stock is None:
            raise ValueError("Invalid value for `stock`, must not be `None`")  # noqa: E501

        self._stock = stock

    @property
    def sold(self):
        """Gets the sold of this ListProductInfo.  # noqa: E501

         销量  # noqa: E501

        :return: The sold of this ListProductInfo.  # noqa: E501
        :rtype: int
        """
        return self._sold

    @sold.setter
    def sold(self, sold):
        """Sets the sold of this ListProductInfo.

         销量  # noqa: E501

        :param sold: The sold of this ListProductInfo.  # noqa: E501
        :type: int
        """
        if sold is None:
            raise ValueError("Invalid value for `sold`, must not be `None`")  # noqa: E501

        self._sold = sold

    @property
    def sku_ver(self):
        """Gets the sku_ver of this ListProductInfo.  # noqa: E501

         skuVer  # noqa: E501

        :return: The sku_ver of this ListProductInfo.  # noqa: E501
        :rtype: int
        """
        return self._sku_ver

    @sku_ver.setter
    def sku_ver(self, sku_ver):
        """Sets the sku_ver of this ListProductInfo.

         skuVer  # noqa: E501

        :param sku_ver: The sku_ver of this ListProductInfo.  # noqa: E501
        :type: int
        """
        if sku_ver is None:
            raise ValueError("Invalid value for `sku_ver`, must not be `None`")  # noqa: E501

        self._sku_ver = sku_ver

    @property
    def child(self):
        """Gets the child of this ListProductInfo.  # noqa: E501

         多个商品集合  # noqa: E501

        :return: The child of this ListProductInfo.  # noqa: E501
        :rtype: list[ListProductChild]
        """
        return self._child

    @child.setter
    def child(self, child):
        """Sets the child of this ListProductInfo.

         多个商品集合  # noqa: E501

        :param child: The child of this ListProductInfo.  # noqa: E501
        :type: list[ListProductChild]
        """
        if child is None:
            raise ValueError("Invalid value for `child`, must not be `None`")  # noqa: E501

        self._child = child

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListProductInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListProductInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
