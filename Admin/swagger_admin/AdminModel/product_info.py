# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'visitor_num': 'str',
        'view_num': 'str',
        'sold_out': 'str',
        'product': 'Product'
    }

    attribute_map = {
        'visitor_num': 'visitor_num',
        'view_num': 'view_num',
        'sold_out': 'sold_out',
        'product': 'product'
    }

    def __init__(self, visitor_num=None, view_num=None, sold_out=None, product=None):  # noqa: E501
        """ProductInfo - a model defined in Swagger"""  # noqa: E501
        self._visitor_num = None
        self._view_num = None
        self._sold_out = None
        self._product = None
        self.discriminator = None
        self.visitor_num = visitor_num
        self.view_num = view_num
        self.sold_out = sold_out
        self.product = product

    @property
    def visitor_num(self):
        """Gets the visitor_num of this ProductInfo.  # noqa: E501

         访客数量  # noqa: E501

        :return: The visitor_num of this ProductInfo.  # noqa: E501
        :rtype: str
        """
        return self._visitor_num

    @visitor_num.setter
    def visitor_num(self, visitor_num):
        """Sets the visitor_num of this ProductInfo.

         访客数量  # noqa: E501

        :param visitor_num: The visitor_num of this ProductInfo.  # noqa: E501
        :type: str
        """
        if visitor_num is None:
            raise ValueError("Invalid value for `visitor_num`, must not be `None`")  # noqa: E501

        self._visitor_num = visitor_num

    @property
    def view_num(self):
        """Gets the view_num of this ProductInfo.  # noqa: E501

         浏览量  # noqa: E501

        :return: The view_num of this ProductInfo.  # noqa: E501
        :rtype: str
        """
        return self._view_num

    @view_num.setter
    def view_num(self, view_num):
        """Sets the view_num of this ProductInfo.

         浏览量  # noqa: E501

        :param view_num: The view_num of this ProductInfo.  # noqa: E501
        :type: str
        """
        if view_num is None:
            raise ValueError("Invalid value for `view_num`, must not be `None`")  # noqa: E501

        self._view_num = view_num

    @property
    def sold_out(self):
        """Gets the sold_out of this ProductInfo.  # noqa: E501

         销量  # noqa: E501

        :return: The sold_out of this ProductInfo.  # noqa: E501
        :rtype: str
        """
        return self._sold_out

    @sold_out.setter
    def sold_out(self, sold_out):
        """Sets the sold_out of this ProductInfo.

         销量  # noqa: E501

        :param sold_out: The sold_out of this ProductInfo.  # noqa: E501
        :type: str
        """
        if sold_out is None:
            raise ValueError("Invalid value for `sold_out`, must not be `None`")  # noqa: E501

        self._sold_out = sold_out

    @property
    def product(self):
        """Gets the product of this ProductInfo.  # noqa: E501


        :return: The product of this ProductInfo.  # noqa: E501
        :rtype: Product
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this ProductInfo.


        :param product: The product of this ProductInfo.  # noqa: E501
        :type: Product
        """
        if product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")  # noqa: E501

        self._product = product

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
